name: Release

on:
  push:
    tags:
      - 'v*'

env:
  APP_NAME: "dns-kit"
  BINARY_SUFFIX: ""
  COMMIT_ID: "${{ github.sha }}"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: ["386", amd64, arm, arm64]
        exclude:
          - goos: darwin
            goarch: arm
          - goos: darwin
            goarch: "386"
      fail-fast: true
    steps:
    - uses: actions/checkout@v3

    - name: Set environment variables
      run: |
        if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
          APP_VERSION=${GITHUB_REF#refs/tags/}-${COMMIT_ID::7}
        else
          APP_VERSION=${GITHUB_REF#refs/heads/}-${COMMIT_ID::7}
        fi

        echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest

    - name: Tests
      run: |
        go test $(go list ./...)

    - name: Build binary file
      env:
         GOOS: ${{ matrix.goos }}
         GOARCH: ${{ matrix.goarch }}
      run: |
         if [ $GOOS = "windows" ]; then export BINARY_SUFFIX="$BINARY_SUFFIX.exe"; fi
         export CGO_ENABLED=0
         export LD_FLAGS="-w -s -X github.com/codfrm/cago/configs.Version=${APP_VERSION}"

         go build -o "bin/${APP_NAME}${BINARY_SUFFIX}" -trimpath -ldflags "${LD_FLAGS}" ./cmd/app

         cd bin
         if [ "${{ matrix.goos }}" = "windows" ]; then
           zip -j "${APP_NAME}_${GOOS}_${GOARCH}.zip" "${APP_NAME}.exe" "${APP_NAME}.exe"
         else
           tar czvf "${APP_NAME}_${GOOS}_${GOARCH}.tar.gz" "${APP_NAME}" "${APP_NAME}"
         fi

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      if: ${{ matrix.goos != 'windows' }}
      with:
         name: ${{ matrix.goos }}_${{ matrix.goarch }}
         path: bin/*.tar.gz

    - name: Upload windows artifact
      uses: actions/upload-artifact@v3
      if: ${{ matrix.goos == 'windows' }}
      with:
         name: ${{ matrix.goos }}_${{ matrix.goarch }}
         path: bin/*.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    # 拿到build产物
    - uses: actions/download-artifact@v3
      with:
        path: bin/

    - uses: ncipollo/release-action@v1
      with:
        artifacts: "bin/*/*.tar.gz,bin/*/*.zip"
        body: "no describe"
        # 判断是否为预发布(包含alpha、beta等关键字)
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') }}
